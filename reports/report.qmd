---
title: Homework 8 - World Bank Analysis
---

GITHUB URL: <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-ishaamalikk>

```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx, config = create_db_wrapper(config_map)
```

# Task 1
```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "Row Count"
FROM world_bank_data.wdi_country
""")
```

# Task 2
```{python}
run_sql_and_return_html(cnx, """
SELECT DISTINCT country_name, country_region
FROM world_bank_data.wdi_country
WHERE country_is_country = 1
ORDER BY country_name
LIMIT 22
""")
```

# Task 3
```{python}
run_sql_and_return_html(cnx, """
SELECT country_name
FROM world_bank_data.wdi_country
WHERE country_is_country = 0
ORDER BY country_name
""")
```

# Task 4
```{python}
execute_ddl(cnx, """
DROP TABLE IF EXISTS my_country;
""")
execute_ddl(cnx, """
CREATE TABLE my_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE country_is_country = 1;
""")
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "Row Count"
FROM my_country
""")
```

# Task 5
```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "Number of Countries"
FROM my_country
WHERE country_region IS NOT NULL
""")
```

# Task 6
```{python}
run_sql_and_return_html(cnx, """
SELECT DISTINCT country_region
FROM my_country
ORDER BY country_region
""")
```

# Task 7
```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, COUNT(*) AS "Number of Countries"
FROM my_country
GROUP BY country_region
ORDER BY country_region
""")
```

# Task 8
```{python}
run_sql_and_return_html(cnx, """
SELECT country_name, country_region
FROM my_country
WHERE country_region = 'North America'
ORDER BY country_name
""")
```

# Task 9
```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, country_name, country_long_name
FROM my_country
WHERE country_name = 'Qatar'
""")
```

# Task 10
```{python}
run_sql_and_return_html(cnx, """
SELECT country_code, country_name, country_abbr, country_wb_abbr, country_region
FROM my_country
WHERE country_abbr <> country_wb_abbr
ORDER BY country_name
""")
```

# Task 11
```{python}
run_sql_and_return_html(cnx, """
SELECT country_income_group, COUNT(*) AS "Number of Countries"
FROM my_country
GROUP BY country_income_group
ORDER BY COUNT(*) DESC
""")
```

# Task 12
```{python}
run_sql_and_return_html(cnx, """
SELECT country_name
FROM my_country
WHERE country_income_group IS NULL
""")
```

# Task 13
```{python}
execute_ddl(cnx, """
UPDATE my_country
SET country_income_group = 'High income'
WHERE country_name = 'Venezuela';
""")
run_sql_and_return_html(cnx, """
SELECT country_name, country_income_group
FROM my_country
WHERE country_name = 'Venezuela'
""")
```

# Task 14
```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, country_income_group, COUNT(*) AS "Number of Countries"
FROM my_country
GROUP BY country_region, country_income_group
ORDER BY country_region, country_income_group
""")
```

# Task 15
```{python}
run_sql_and_return_html(cnx, """
SELECT
  country_region,
  SUM(CASE WHEN country_income_group = 'High income' THEN 1 ELSE 0 END) AS "High income",
  SUM(CASE WHEN country_income_group = 'Upper middle income' THEN 1 ELSE 0 END) AS "Upper middle income",
  SUM(CASE WHEN country_income_group = 'Lower middle income' THEN 1 ELSE 0 END) AS "Lower middle income",
  SUM(CASE WHEN country_income_group = 'Low income' THEN 1 ELSE 0 END) AS "Low income",
  SUM(CASE WHEN country_income_group IS NULL THEN 1 ELSE 0 END) AS "Other",
  COUNT(*) AS "Total"
FROM my_country
GROUP BY country_region
ORDER BY country_region
""")
```

# Task 16
```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, COUNT(*) AS "Number of Low Income Countries"
FROM my_country
WHERE country_income_group = 'Low income'
GROUP BY country_region
ORDER BY COUNT(*) DESC
LIMIT 1
""")
```

# Task 17
```{python}
run_sql_and_return_html(cnx, """
SELECT country_code, country_name, country_region, country_income_group
FROM my_country
WHERE country_region = (
  SELECT country_region FROM my_country WHERE country_code = 'MHL'
)
AND country_income_group = (
  SELECT country_income_group FROM my_country WHERE country_code = 'MHL'
)
ORDER BY country_name
""")
```

# Task 18
```{python}
run_sql_and_return_html(cnx, """
WITH regions AS (
  SELECT DISTINCT country_region FROM my_country
),
income_groups AS (
  SELECT DISTINCT country_income_group FROM my_country
)
SELECT r.country_region, i.country_income_group
FROM regions r
CROSS JOIN income_groups i
WHERE NOT EXISTS (
  SELECT 1
  FROM my_country
  WHERE country_region = r.country_region
    AND country_income_group = i.country_income_group
)
ORDER BY r.country_region, i.country_income_group
""")
```

# Task 19
```{python}
run_sql_and_return_html(cnx, """
WITH base AS (
  SELECT country_region, country_income_group, COUNT(*) AS cnt
  FROM my_country
  GROUP BY country_region, country_income_group
),
region_totals AS (
  SELECT country_region, COUNT(*) AS region_total
  FROM my_country
  GROUP BY country_region
),
income_totals AS (
  SELECT country_income_group, COUNT(*) AS income_total
  FROM my_country
  GROUP BY country_income_group
),
total AS (
  SELECT COUNT(*) AS grand_total FROM my_country
)
SELECT
  b.country_region, b.country_income_group, b.cnt,
  rt.region_total, it.income_total, t.grand_total,
  ROUND(b.cnt * 100.0 / t.grand_total, 1) AS pct_total
FROM base b
JOIN region_totals rt ON b.country_region = rt.country_region
JOIN income_totals it ON b.country_income_group = it.country_income_group
JOIN total t
ORDER BY b.country_region, b.country_income_group
""")
```

# Task 20
```{python}
run_sql_and_return_html(cnx, """
WITH income_counts AS (
  SELECT country_income_group, COUNT(*) AS count
  FROM my_country
  GROUP BY country_income_group
),
total AS (
  SELECT COUNT(*) AS total_count FROM my_country
)
SELECT
  i.country_income_group AS income_group,
  i.count AS num_countries,
  t.total_count AS total_countries,
  ROUND(i.count * 100.0 / t.total_count, 1) AS pct_total
FROM income_counts i, total t
ORDER BY pct_total DESC
""")
```

# Task 21
```{python}
run_sql_and_return_html(cnx, """
WITH income_counts AS (
  SELECT country_income_group, COUNT(*) AS count
  FROM my_country
  GROUP BY country_income_group
),
total AS (
  SELECT COUNT(*) AS total_count FROM my_country
)
SELECT
  i.country_income_group AS income_group,
  i.count AS num_countries,
  t.total_count AS total_countries,
  ROUND(i.count * 100.0 / t.total_count, 1) AS pct_total
FROM income_counts i, total t
ORDER BY pct_total DESC
""")
```

## Reflection
1. I feel most confident writing SELECT statements and using GROUP BY, but I need more practice with CROSS JOIN and nested subqueries. This assignment gave me a solid foundation.  
2. For complex tasks like Task 18, I broke them down into parts: first understanding the goal, then writing queries in steps. I used CTEs to test logic piece by piece.  
3. My biggest takeaway is how powerful SQL is for data analysis and transformation. These skills will help me analyze real-world data and automate insights efficiently.

## README

A quality README is an important part of EVERY project. Using the Quarto include command we’re including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it’s explanatory! Note that you don’t need a README inside the `reports` folder for this assignment. We’re only focused on the root `README.md`.

::: {style="background:lightgray; margin-left:20px; border-top:3px solid black; border-bottom:3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::